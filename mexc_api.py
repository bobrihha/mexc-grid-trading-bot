"""
MEXC API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import requests
import hashlib
import hmac
import time
from typing import Dict, List, Optional
import json


class MexcAPIClient:
    """
    API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–∏—Ä–∂–∏ MEXC

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞—Ö
    - –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–∏—Ü–∏–π
    """

    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            api_key: API –∫–ª—é—á
            api_secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–Ω–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        """
        self.api_key = api_key
        self.api_secret = api_secret.encode()

        if testnet:
            self.base_url = (
                "https://api.mexc.com/api/v3"  # MEXC –Ω–µ –∏–º–µ–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ testnet
            )
            print(
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: MEXC –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π testnet. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!"
            )
        else:
            self.base_url = "https://api.mexc.com/api/v3"

        self.session = requests.Session()
        self.session.headers.update({"X-MEXC-APIKEY": api_key})

    def _generate_signature(self, query_string: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return hmac.new(
            self.api_secret, query_string.encode("utf-8"), hashlib.sha256
        ).hexdigest()

    def _request(
        self, method: str, endpoint: str, params: Dict = None, signed: bool = False
    ) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ API

        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, DELETE)
            endpoint: API —ç–Ω–¥–ø–æ–∏–Ω—Ç
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            signed: –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å—å
        """
        params = params or {}
        url = f"{self.base_url}{endpoint}"

        if signed:
            params["timestamp"] = int(time.time() * 1000)
            query_string = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
            params["signature"] = self._generate_signature(query_string)

        try:
            if method == "GET":
                response = self.session.get(url, params=params)
            elif method == "POST":
                response = self.session.post(url, params=params)
            elif method == "DELETE":
                response = self.session.delete(url, params=params)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")

            response.raise_for_status()
            return response.json()

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if hasattr(e.response, "text"):
                print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            raise

    def exchange_info(self, symbol: str = None) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ –≤–∫–ª—é—á–∞—è tick_size, step_size, min_notional
        """
        params = {"symbol": symbol} if symbol else {}
        data = self._request("GET", "/exchangeInfo", params)

        if symbol:
            # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
            for pair in data.get("symbols", []):
                if pair["symbol"] == symbol:
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                    filters = {f["filterType"]: f for f in pair["filters"]}

                    return {
                        "symbol": symbol,
                        "status": pair["status"],
                        "tick_size": float(
                            filters.get("PRICE_FILTER", {}).get("tickSize", "0.01")
                        ),
                        "qty_step": float(
                            filters.get("LOT_SIZE", {}).get("stepSize", "0.0001")
                        ),
                        "min_qty": float(
                            filters.get("LOT_SIZE", {}).get("minQty", "0.0001")
                        ),
                        "min_notional": float(
                            filters.get("MIN_NOTIONAL", {}).get("minNotional", "10")
                        ),
                    }
            raise ValueError(f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        return data

    def ticker_price(self, symbol: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–∞—Ä—ã
        """
        params = {"symbol": symbol}
        return self._request("GET", "/ticker/price", params)

    def order_book(self, symbol: str, limit: int = 5) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π (5, 10, 20, 50, 100, 500, 1000, 5000)

        Returns:
            –ö–Ω–∏–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤ —Å bid/ask
        """
        params = {"symbol": symbol, "limit": limit}
        return self._request("GET", "/depth", params)

    def account_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–∞—Ö

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å—ã
        """
        return self._request("GET", "/account", signed=True)

    def place_order(
        self,
        symbol: str,
        side: str,
        quantity: float,
        price: float = None,
        order_type: str = "LIMIT",
    ) -> Dict:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –°—Ç–æ—Ä–æ–Ω–∞ (BUY/SELL)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (MARKET, LIMIT)

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
        """
        params = {
            "symbol": symbol,
            "side": side,
            "type": order_type,
            "quantity": quantity,
        }

        if order_type == "LIMIT":
            if price is None:
                raise ValueError("–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            params["price"] = price
            params["timeInForce"] = "GTC"  # Good Till Canceled

        return self._request("POST", "/order", params, signed=True)

    def cancel_order(
        self, symbol: str, order_id: str = None, orig_client_order_id: str = None
    ) -> Dict:
        """
        –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            order_id: ID –æ—Ä–¥–µ—Ä–∞
            orig_client_order_id: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
        """
        params = {"symbol": symbol}

        if order_id:
            params["orderId"] = order_id
        elif orig_client_order_id:
            params["origClientOrderId"] = orig_client_order_id
        else:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å order_id –∏–ª–∏ orig_client_order_id")

        return self._request("DELETE", "/order", params, signed=True)

    def open_orders(self, symbol: str = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–µ—Å–ª–∏ None, —Ç–æ –≤—Å–µ –ø–∞—Ä—ã)

        Returns:
            –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        params = {"symbol": symbol} if symbol else {}
        return self._request("GET", "/openOrders", params, signed=True)

    def order_history(self, symbol: str, limit: int = 50) -> List[Dict]:
        """
        –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        Returns:
            –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤
        """
        params = {"symbol": symbol, "limit": limit}
        return self._request("GET", "/allOrders", params, signed=True)

    def my_trades(self, symbol: str, limit: int = 50) -> List[Dict]:
        """
        –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        Returns:
            –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
        """
        params = {"symbol": symbol, "limit": limit}
        return self._request("GET", "/myTrades", params, signed=True)


# –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class MockMexcAPIClient(MexcAPIClient):
    """
    –ú–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫-–∫–ª–∏–µ–Ω—Ç–∞"""
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π __init__ —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å API –∫–ª—é—á–∏
        self.mock_price = 45000.0
        self.mock_orders = {}
        self.mock_balance = {"USDT": 10000.0, "BTC": 0.22}

        print("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MOCK API –∫–ª–∏–µ–Ω—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")

    def ticker_price(self, symbol: str) -> Dict:
        """–ú–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        return {"symbol": symbol, "price": str(self.mock_price)}

    def order_book(self, symbol: str, limit: int = 5) -> Dict:
        """–ú–æ–∫ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        return {
            "bids": [[str(self.mock_price - 10), "1.0"]],
            "asks": [[str(self.mock_price + 10), "1.0"]],
        }

    def place_order(
        self,
        symbol: str,
        side: str,
        quantity: float,
        price: float = None,
        order_type: str = "LIMIT",
    ) -> Dict:
        """–ú–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        order_id = str(len(self.mock_orders) + 1)

        order = {
            "orderId": order_id,
            "symbol": symbol,
            "side": side,
            "type": order_type,
            "quantity": str(quantity),
            "price": str(price) if price else None,
            "status": "NEW",
        }

        self.mock_orders[order_id] = order
        print(f"üìã MOCK: –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω {side} {quantity} @ {price}")

        return order

    def cancel_order(self, symbol: str, order_id: str = None, **kwargs) -> Dict:
        """–ú–æ–∫ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
        if order_id in self.mock_orders:
            self.mock_orders[order_id]["status"] = "CANCELED"
            print(f"‚ùå MOCK: –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
            return self.mock_orders[order_id]
        else:
            raise ValueError(f"–û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def open_orders(self, symbol: str = None) -> List[Dict]:
        """–ú–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        return [
            order
            for order in self.mock_orders.values()
            if order["status"] == "NEW"
            and (symbol is None or order["symbol"] == symbol)
        ]

    def account_info(self) -> Dict:
        """–ú–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        balances = [
            {"asset": asset, "free": str(amount), "locked": "0.0"}
            for asset, amount in self.mock_balance.items()
        ]

        return {"balances": balances}

    def exchange_info(self, symbol: str = None) -> Dict:
        """–ú–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ"""
        if symbol:
            return {
                "symbol": symbol,
                "status": "TRADING",
                "tick_size": 0.01,
                "qty_step": 0.0001,
                "min_qty": 0.0001,
                "min_notional": 10.0,
            }
        return {"symbols": []}
