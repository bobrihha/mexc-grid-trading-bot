"""
Secure Live Runner –¥–ª—è MEXC Grid Trading Bot
–í–µ—Ä—Å–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º API –∫–ª—é—á–µ–π
"""

import time
import json
import os
import asyncio
from datetime import datetime
from typing import Dict, Optional
import logging
from pathlib import Path
from strategy import GridStrategy, OrderType
from mexc_api import MexcAPIClient, MockMexcAPIClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_secure.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class SecureLiveTradingBot:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º API –∫–ª—é—á–µ–π
    """
    
    def __init__(self, config_path: str = 'config.json'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_path = config_path
        self.running = False
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_path, 'r', encoding='utf-8') as f:
            self.config = json.load(f)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategy = GridStrategy(config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        self.api_client = self._init_api_client()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_price = 0.0
        self.poll_interval = self.config['runtime']['poll_seconds']
        self.symbol = self.config['runtime']['symbol']
        
        logger.info(f"ü§ñ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {self.symbol}")
    
    def _init_api_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–π"""
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
        print("\nüîê MEXC Grid Trading Bot - Secure Mode")
        print("=" * 50)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
            print("1 - üß™ Mock (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
            print("2 - üîó Live (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å API —Ñ–∞–π–ª–æ–º)")
            print("3 - ‚å®Ô∏è  Live (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ API)")
            
            choice = input("\n–í—ã–±–æ—Ä (1/2/3): ").strip()
            
            if choice == '1':
                logger.info("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MOCK —Ä–µ–∂–∏–º")
                return MockMexcAPIClient()
            
            elif choice == '2':
                return self._init_from_file()
            
            elif choice == '3':
                return self._init_interactive()
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def _init_from_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏"""
        api_file = 'api_keys.json'
        
        if not os.path.exists(api_file):
            print(f"\n‚ùå –§–∞–π–ª {api_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üìã –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –ø–æ –æ–±—Ä–∞–∑—Ü—É api_keys_template.json:")
            print("   1. cp api_keys_template.json api_keys.json")
            print("   2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ api_keys.json —Å –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
            exit(1)
        
        try:
            with open(api_file, 'r') as f:
                api_config = json.load(f)
            
            mexc_config = api_config['mexc']
            api_key = mexc_config['api_key']
            api_secret = mexc_config['api_secret']
            testnet = mexc_config.get('testnet', True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª—é—á–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if api_key == "YOUR_MEXC_API_KEY_HERE" or api_secret == "YOUR_MEXC_API_SECRET_HERE":
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_MEXC_API_KEY_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ api_keys.json")
                exit(1)
            
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC API –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            if testnet:
                logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TESTNET —Ä–µ–∂–∏–º")
            
            return MexcAPIClient(api_key, api_secret, testnet=testnet)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π: {e}")
            exit(1)
    
    def _init_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ API –∫–ª—é—á–µ–π"""
        print("\nüîë –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ API –∫–ª—é—á–µ–π")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–ª—é—á–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ!")
        
        api_key = input("–í–≤–µ–¥–∏—Ç–µ MEXC API Key: ").strip()
        api_secret = input("–í–≤–µ–¥–∏—Ç–µ MEXC API Secret: ").strip()
        
        if not api_key or not api_secret:
            print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
            exit(1)
        
        testnet_choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å testnet? (y/n): ").strip().lower()
        testnet = testnet_choice in ['y', 'yes', '–¥–∞', '1']
        
        logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC API (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)")
        if testnet:
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TESTNET —Ä–µ–∂–∏–º")
        
        return MexcAPIClient(api_key, api_secret, testnet=testnet)
    
    def get_market_data(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_data = self.api_client.ticker_price(self.symbol)
            current_price = float(price_data['price'])
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤
            orderbook = self.api_client.order_book(self.symbol, limit=5)
            
            best_bid = float(orderbook['bids'][0][0]) if orderbook['bids'] else current_price
            best_ask = float(orderbook['asks'][0][0]) if orderbook['asks'] else current_price
            
            return {
                'price': current_price,
                'bid': best_bid,
                'ask': best_ask,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ fallback
            fallback_price = self.last_price if self.last_price > 0 else 45000.0
            return {
                'price': fallback_price,
                'bid': fallback_price * 0.999,
                'ask': fallback_price * 1.001,
                'timestamp': datetime.now()
            }
    
    def execute_orders(self, actions: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        for order in actions.get('place_orders', []):
            try:
                logger.info(f"üìã –†–∞–∑–º–µ—â–∞–µ–º {order.side.value}: {order.quantity} @ {order.price}")
                
                result = self.api_client.place_order(
                    symbol=order.symbol,
                    side=order.side.value,
                    quantity=order.quantity,
                    price=order.price,
                    order_type='LIMIT'
                )
                
                order.id = result.get('orderId', order.id)
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order.id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order.id}: {e}")
        
        # –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤
        for order_id in actions.get('cancel_orders', []):
            try:
                logger.info(f"‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä: {order_id}")
                
                self.api_client.cancel_order(
                    symbol=self.symbol,
                    order_id=order_id
                )
                
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: {order_id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
    
    def log_status(self, market_data: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        status = self.strategy.get_status()
        
        logger.info("=" * 50)
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${status['cash']:.2f} | BTC: {status['base_holdings']:.6f}")
        logger.info(f"üìä –ö–∞–ø–∏—Ç–∞–ª: ${status['equity']:.2f} | P&L: {status['realized_pnl']:.2f}")
        logger.info(f"üìã –û—Ä–¥–µ—Ä–∞: {status['active_orders']} | –ü–æ–∑–∏—Ü–∏–∏: {status['positions']}")
        logger.info(f"üíπ –¶–µ–Ω–∞: ${market_data['price']:.2f} | –ü—Ä–æ—Å–∞–¥–∫–∞: {status['drawdown']:.1%}")
        logger.info("=" * 50)
    
    async def run_strategy_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        market_data = self.get_market_data()
        self.last_price = market_data['price']
        
        # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        actions = self.strategy.step_book(
            current_price=market_data['price'],
            bid=market_data['bid'],
            ask=market_data['ask']
        )
        
        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in actions.get('messages', []):
            logger.info(f"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {message}")
        
        # 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if actions.get('place_orders') or actions.get('cancel_orders'):
            self.execute_orders(actions)
        
        # 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤
        if hasattr(self, 'cycle_count'):
            self.cycle_count += 1
        else:
            self.cycle_count = 1
            
        if self.cycle_count % 5 == 0:
            self.log_status(market_data)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ MEXC Grid Trading Bot (Secure)...")
        self.running = True
        
        try:
            while self.running:
                asyncio.run(self.run_strategy_cycle())
                time.sleep(self.poll_interval)
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
            self.stop()
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.running = False
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("üîê MEXC Grid Trading Bot - Secure Edition")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('.gitignore'):
        with open('.gitignore', 'w') as f:
            f.write("api_keys.json\n")
            f.write("*.log\n")
            f.write("__pycache__/\n")
        print("‚úÖ –°–æ–∑–¥–∞–Ω .gitignore –¥–ª—è –∑–∞—â–∏—Ç—ã API –∫–ª—é—á–µ–π")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = SecureLiveTradingBot()
    bot.run()


if __name__ == "__main__":
    main()
