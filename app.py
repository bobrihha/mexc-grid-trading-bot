"""
FastAPI –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MEXC —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
"""

from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
import json
import os
from typing import Dict, Any
from strategy import GridStrategy
import uvicorn

app = FastAPI(title="MEXC Grid Trading Bot", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
bot_strategy: GridStrategy = None
bot_running = False

# HTML —à–∞–±–ª–æ–Ω—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
index_template = """
<!DOCTYPE html>
<html>
<head>
    <title>MEXC Grid Trading Bot</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .card { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .status { padding: 10px; border-radius: 4px; margin: 10px 0; }
        .running { background-color: #d4edda; color: #155724; }
        .stopped { background-color: #f8d7da; color: #721c24; }
        .btn { padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        .btn-success { background-color: #28a745; color: white; }
        .btn-danger { background-color: #dc3545; color: white; }
        .form-group { margin: 15px 0; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-group input, select { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .stat-item { text-align: center; }
        .stat-value { font-size: 24px; font-weight: bold; color: #007bff; }
        .stat-label { color: #666; font-size: 14px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ MEXC Grid Trading Bot</h1>
        
        <div class="card">
            <h2>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</h2>
            <div class="status {{ 'running' if bot_running else 'stopped' }}">
                {{ '–ó–ê–ü–£–©–ï–ù ‚úÖ' if bot_running else '–û–°–¢–ê–ù–û–í–õ–ï–ù ‚è∏Ô∏è' }}
            </div>
            
            {% if bot_running %}
            <form method="post" action="/stop" style="display: inline;">
                <button type="submit" class="btn btn-danger">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞</button>
            </form>
            {% else %}
            <form method="post" action="/start" style="display: inline;">
                <button type="submit" class="btn btn-success">–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</button>
            </form>
            {% endif %}
        </div>

        {% if status %}
        <div class="card">
            <h2>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2>
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-value">${{ "%.2f"|format(status.cash) }}</div>
                    <div class="stat-label">–ù–∞–ª–∏—á–Ω—ã–µ (USDT)</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ "%.6f"|format(status.base_holdings) }}</div>
                    <div class="stat-label">BTC</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${{ "%.2f"|format(status.equity) }}</div>
                    <div class="stat-label">–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ "%.2f"|format(status.realized_pnl) }}</div>
                    <div class="stat-label">–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ status.active_orders }}</div>
                    <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ status.positions }}</div>
                    <div class="stat-label">–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</div>
                </div>
            </div>
        </div>
        {% endif %}

        <div class="card">
            <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</h2>
            <form method="post" action="/update_config">
                <div class="form-group">
                    <label>–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞:</label>
                    <input type="text" name="symbol" value="{{ config.runtime.symbol }}" required>
                </div>
                
                <div class="form-group">
                    <label>–†–µ–∂–∏–º —Å–µ—Ç–∫–∏:</label>
                    <select name="grid_mode">
                        <option value="percent" {{ 'selected' if config.grid.mode == 'percent' else '' }}>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π</option>
                        <option value="atr" {{ 'selected' if config.grid.mode == 'atr' else '' }}>ATR</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>–®–∞–≥ —Å–µ—Ç–∫–∏ (%):</label>
                    <input type="number" name="step_percent" value="{{ config.grid.step_percent }}" step="0.001" min="0.001" required>
                </div>
                
                <div class="form-group">
                    <label>–†–µ–∂–∏–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:</label>
                    <select name="tp_mode">
                        <option value="step" {{ 'selected' if config.grid.tp_mode == 'step' else '' }}>–û–¥–∏–Ω —à–∞–≥</option>
                        <option value="percent" {{ 'selected' if config.grid.tp_mode == 'percent' else '' }}>–ü—Ä–æ—Ü–µ–Ω—Ç</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%):</label>
                    <input type="number" name="tp_percent" value="{{ config.grid.tp_percent }}" step="0.001" min="0.001">
                </div>
                
                <div class="form-group">
                    <label>–£—Ä–æ–≤–Ω–µ–π –Ω–∏–∂–µ —Ü–µ–Ω—ã:</label>
                    <input type="number" name="levels_below" value="{{ config.grid.levels_below }}" min="1" max="50" required>
                </div>
                
                <div class="form-group">
                    <label>–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª (USDT):</label>
                    <input type="number" name="quote_start" value="{{ config.capital.quote_start }}" min="100" required>
                </div>
                
                <div class="form-group">
                    <label>
                        <input type="checkbox" name="compound" {{ 'checked' if config.capital.compound else '' }}>
                        –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞—É–Ω–¥–∏–Ω–≥
                    </label>
                </div>
                
                <button type="submit" class="btn btn-success">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
            </form>
        </div>
    </div>
</body>
</html>
"""


@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    global bot_strategy, bot_running

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    status = None
    if bot_strategy:
        status = bot_strategy.get_status()

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Jinja2
    from jinja2 import Template

    template = Template(index_template)

    return template.render(
        bot_running=bot_running,
        config=_dict_to_obj(config),
        status=_dict_to_obj(status) if status else None,
    )


@app.post("/start")
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_strategy, bot_running

    if not bot_running:
        try:
            bot_strategy = GridStrategy("config.json")
            bot_running = True
            print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

    return RedirectResponse(url="/", status_code=302)


@app.post("/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global bot_strategy, bot_running

    if bot_running:
        bot_running = False
        bot_strategy = None
        print("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    return RedirectResponse(url="/", status_code=302)


@app.post("/update_config")
async def update_config(
    symbol: str = Form(...),
    grid_mode: str = Form(...),
    step_percent: float = Form(...),
    tp_mode: str = Form(...),
    tp_percent: float = Form(...),
    levels_below: int = Form(...),
    quote_start: float = Form(...),
    compound: str = Form(None),
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    config["runtime"]["symbol"] = symbol
    config["grid"]["mode"] = grid_mode
    config["grid"]["step_percent"] = step_percent
    config["grid"]["tp_mode"] = tp_mode
    config["grid"]["tp_percent"] = tp_percent
    config["grid"]["levels_below"] = levels_below
    config["capital"]["quote_start"] = quote_start
    config["capital"]["compound"] = compound == "on"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open("config.json", "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2, ensure_ascii=False)

    print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return RedirectResponse(url="/", status_code=302)


@app.get("/api/status")
async def api_status():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    global bot_strategy, bot_running

    if bot_strategy:
        return {"running": bot_running, "status": bot_strategy.get_status()}
    else:
        return {"running": False, "status": None}


def _dict_to_obj(d):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""
    if isinstance(d, dict):
        return type("obj", (object,), {k: _dict_to_obj(v) for k, v in d.items()})
    return d


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MEXC Grid Bot...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
