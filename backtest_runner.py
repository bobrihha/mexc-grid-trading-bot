"""
Backtest Runner –¥–ª—è MEXC Grid Trading Bot
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import numpy as np
import json
import argparse
from datetime import datetime, timedelta
from typing import Dict, List, Tuple
from strategy import GridStrategy
from pathlib import Path
import matplotlib.pyplot as plt


class BacktestEngine:
    """
    –î–≤–∏–∂–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    - –£—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
    - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è equity curve
    """
    
    def __init__(self, config_path: str = 'config.json'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞"""
        with open(config_path, 'r') as f:
            self.config = json.load(f)
        
        self.strategy = GridStrategy(config_path)
        self.results = {
            'trades': [],
            'equity_curve': [],
            'daily_returns': [],
            'stats': {}
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        self.maker_fee = 0.0  # MEXC maker fee
        self.taker_fee = 0.001  # 0.1% taker fee
        self.slippage = 0.0005  # 0.05% slippage
        
        print(f"üî¨ Backtest Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_data(self, data_path: str) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
            
        Expected format:
        timestamp,open,high,low,close,volume
        """
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {data_path}")
        
        if data_path.endswith('.csv'):
            df = pd.read_csv(data_path)
        else:
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            df = self.generate_synthetic_data()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        
        if not all(col in df.columns for col in required_cols):
            raise ValueError(f"CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {required_cols}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timestamp
        if df['timestamp'].dtype == 'object':
            df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        df = df.sort_values('timestamp').reset_index(drop=True)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamp'].min()} - {df['timestamp'].max()}")
        
        return df
    
    def generate_synthetic_data(self, days: int = 30) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        start_price = 45000.0
        volatility = 0.02  # 2% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        periods = days * 24 * 60  # –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω (Geometric Brownian Motion)
        dt = 1 / (365 * 24 * 60)  # 1 –º–∏–Ω—É—Ç–∞ –≤ –¥–æ–ª—è—Ö –≥–æ–¥–∞
        prices = [start_price]
        
        for i in range(periods):
            # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
            shock = np.random.normal(0, volatility * np.sqrt(dt))
            new_price = prices[-1] * (1 + shock)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥–æ–≤–æ—Å—Ç—å (—Å–ª–∞–±–æ —Ä–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥)
            trend = 0.00001  # 0.001% –≤ –º–∏–Ω—É—Ç—É
            new_price *= (1 + trend)
            
            prices.append(new_price)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ OHLC –¥–∞–Ω–Ω—ã—Ö
        timestamps = []
        ohlc_data = []
        
        start_time = datetime.now() - timedelta(days=days)
        
        for i in range(0, len(prices) - 1):
            timestamp = start_time + timedelta(minutes=i)
            
            # –ü—Ä–æ—Å—Ç–æ–µ OHLC –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ü–µ–Ω
            open_price = prices[i]
            close_price = prices[i + 1]
            
            # High/Low —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            high_price = max(open_price, close_price) * (1 + np.random.uniform(0, 0.002))
            low_price = min(open_price, close_price) * (1 - np.random.uniform(0, 0.002))
            
            volume = np.random.uniform(100, 1000)
            
            timestamps.append(timestamp)
            ohlc_data.append([open_price, high_price, low_price, close_price, volume])
        
        df = pd.DataFrame(ohlc_data, columns=['open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = timestamps
        
        return df[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
    
    def simulate_execution(self, order_type: str, price: float, quantity: float, 
                          market_price: float) -> Tuple[bool, float, float]:
        """
        –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        
        Returns:
            (executed, fill_price, fill_quantity)
        """
        if order_type == 'LIMIT':
            # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è
            if order_type == 'BUY' and market_price <= price:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ –ø–æ–ª—å–∑—É —Ä—ã–Ω–∫–∞
                fill_price = price * (1 + self.slippage)
                return True, fill_price, quantity
            elif order_type == 'SELL' and market_price >= price:
                fill_price = price * (1 - self.slippage)
                return True, fill_price, quantity
        
        return False, 0.0, 0.0
    
    def calculate_metrics(self, df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        equity_curve = pd.DataFrame(self.results['equity_curve'])
        
        if len(equity_curve) == 0:
            return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫'}
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        initial_capital = equity_curve['equity'].iloc[0]
        final_capital = equity_curve['equity'].iloc[-1]
        total_return = (final_capital - initial_capital) / initial_capital
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        equity_curve['running_max'] = equity_curve['equity'].expanding().max()
        equity_curve['drawdown'] = (equity_curve['equity'] - equity_curve['running_max']) / equity_curve['running_max']
        max_drawdown = equity_curve['drawdown'].min()
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        if len(equity_curve) > 1:
            returns = equity_curve['equity'].pct_change().dropna()
            sharpe_ratio = returns.mean() / returns.std() * np.sqrt(252) if returns.std() > 0 else 0
        else:
            sharpe_ratio = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
        trades = pd.DataFrame(self.results['trades'])
        if len(trades) > 0:
            trades['pnl'] = trades['sell_price'] - trades['buy_price']
            winning_trades = trades[trades['pnl'] > 0]
            losing_trades = trades[trades['pnl'] < 0]
            
            win_rate = len(winning_trades) / len(trades) if len(trades) > 0 else 0
            avg_win = winning_trades['pnl'].mean() if len(winning_trades) > 0 else 0
            avg_loss = losing_trades['pnl'].mean() if len(losing_trades) > 0 else 0
        else:
            win_rate = avg_win = avg_loss = 0
        
        # –ü–µ—Ä–∏–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        start_date = df['timestamp'].iloc[0]
        end_date = df['timestamp'].iloc[-1]
        test_days = (end_date - start_date).days
        
        return {
            'period': {
                'start': start_date.strftime('%Y-%m-%d'),
                'end': end_date.strftime('%Y-%m-%d'),
                'days': test_days
            },
            'returns': {
                'initial_capital': initial_capital,
                'final_capital': final_capital,
                'total_return': total_return,
                'annualized_return': (final_capital / initial_capital) ** (365 / test_days) - 1 if test_days > 0 else 0
            },
            'risk': {
                'max_drawdown': max_drawdown,
                'sharpe_ratio': sharpe_ratio,
                'volatility': returns.std() * np.sqrt(252) if 'returns' in locals() and len(returns) > 1 else 0
            },
            'trades': {
                'total_trades': len(trades) if 'trades' in locals() else 0,
                'win_rate': win_rate,
                'avg_win': avg_win,
                'avg_loss': avg_loss,
                'profit_factor': abs(avg_win / avg_loss) if avg_loss != 0 else float('inf')
            }
        }
    
    def run_backtest(self, df: pd.DataFrame) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
        
        total_rows = len(df)
        
        for i, row in df.iterrows():
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if i % (total_rows // 20) == 0:
                progress = (i / total_rows) * 100
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
            
            # –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            current_price = row['close']
            bid = current_price * 0.999  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π bid
            ask = current_price * 1.001  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π ask
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            actions = self.strategy.step_book(current_price, bid, ask)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±—ç–∫—Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            status = self.strategy.get_status()
            self.results['equity_curve'].append({
                'timestamp': row['timestamp'],
                'price': current_price,
                'equity': status['equity'],
                'cash': status['cash'],
                'base_holdings': status['base_holdings'],
                'realized_pnl': status['realized_pnl']
            })
        
        print("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        metrics = self.calculate_metrics(df)
        self.results['stats'] = metrics
        
        return self.results
    
    def save_results(self, output_dir: str = 'backtest_results'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ equity curve
        equity_df = pd.DataFrame(self.results['equity_curve'])
        if len(equity_df) > 0:
            equity_df.to_csv(output_path / 'equity_curve.csv', index=False)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        trades_df = pd.DataFrame(self.results['trades'])
        if len(trades_df) > 0:
            trades_df.to_csv(output_path / 'trades.csv', index=False)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        with open(output_path / 'summary.json', 'w') as f:
            json.dump(self.results['stats'], f, indent=2, default=str)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    
    def plot_results(self, output_dir: str = 'backtest_results'):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        equity_df = pd.DataFrame(self.results['equity_curve'])
        
        if len(equity_df) == 0:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        plt.style.use('seaborn-v0_8' if 'seaborn-v0_8' in plt.style.available else 'default')
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle('MEXC Grid Trading Bot - Backtest Results', fontsize=16)
        
        # Equity Curve
        ax1.plot(equity_df['timestamp'], equity_df['equity'], 'b-', linewidth=2)
        ax1.set_title('Equity Curve')
        ax1.set_ylabel('Capital ($)')
        ax1.grid(True, alpha=0.3)
        
        # Price vs Holdings
        ax2.plot(equity_df['timestamp'], equity_df['price'], 'r-', alpha=0.7, label='BTC Price')
        ax2_twin = ax2.twinx()
        ax2_twin.plot(equity_df['timestamp'], equity_df['base_holdings'], 'g-', alpha=0.7, label='BTC Holdings')
        ax2.set_title('Price vs Holdings')
        ax2.set_ylabel('BTC Price ($)', color='r')
        ax2_twin.set_ylabel('BTC Holdings', color='g')
        ax2.grid(True, alpha=0.3)
        
        # Cash Balance
        ax3.plot(equity_df['timestamp'], equity_df['cash'], 'purple', linewidth=2)
        ax3.set_title('Cash Balance')
        ax3.set_ylabel('Cash ($)')
        ax3.grid(True, alpha=0.3)
        
        # Realized PnL
        ax4.plot(equity_df['timestamp'], equity_df['realized_pnl'], 'orange', linewidth=2)
        ax4.set_title('Realized P&L')
        ax4.set_ylabel('P&L ($)')
        ax4.grid(True, alpha=0.3)
        ax4.axhline(y=0, color='black', linestyle='--', alpha=0.5)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        for ax in [ax1, ax2, ax3, ax4]:
            ax.tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        plt.savefig(output_path / 'backtest_results.png', dpi=300, bbox_inches='tight')
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path / 'backtest_results.png'}")
        
        plt.show()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    parser = argparse.ArgumentParser(description='MEXC Grid Bot Backtesting')
    parser.add_argument('--config', default='config.json', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--data', help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    parser.add_argument('--output', default='backtest_results', help='–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--plot', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏')
    
    args = parser.parse_args()
    
    print("üî¨ MEXC Grid Trading Bot - Backtesting")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
    engine = BacktestEngine(args.config)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if args.data and Path(args.data).exists():
        df = engine.load_data(args.data)
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        df = engine.load_data(None)
    
    # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
    results = engine.run_backtest(df)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    stats = results['stats']
    print("\n" + "=" * 50)
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê")
    print("=" * 50)
    
    if 'error' in stats:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}")
        return
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {stats['period']['start']} - {stats['period']['end']} ({stats['period']['days']} –¥–Ω–µ–π)")
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${stats['returns']['initial_capital']:,.2f}")
    print(f"üí∞ –ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${stats['returns']['final_capital']:,.2f}")
    print(f"üìä –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['returns']['total_return']:.2%}")
    print(f"üìà –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['returns']['annualized_return']:.2%}")
    print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['risk']['max_drawdown']:.2%}")
    print(f"üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {stats['risk']['sharpe_ratio']:.2f}")
    print(f"üé≤ –°–¥–µ–ª–æ–∫: {stats['trades']['total_trades']}")
    print(f"üéØ –í–∏–Ω—Ä–µ–π—Ç: {stats['trades']['win_rate']:.1%}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    engine.save_results(args.output)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    if args.plot:
        try:
            engine.plot_results(args.output)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib: pip install matplotlib")


if __name__ == "__main__":
    main()
