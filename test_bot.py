#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ MEXC Grid Trading Bot
"""

def test_strategy():
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GridStrategy...")
    
    try:
        from strategy import GridStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy = GridStrategy('config.json')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = strategy.get_status()
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Cash=${status['cash']:.2f}, BTC={status['base_holdings']:.6f}")
        
        # –¢–µ—Å—Ç —à–∞–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        actions = strategy.step_book(45000.0, 44950.0, 45050.0)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(actions['place_orders'])} –æ—Ä–¥–µ—Ä–æ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False


def test_api_client():
    """–¢–µ—Å—Ç API –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        from mexc_api import MockMexcAPIClient
        
        # –°–æ–∑–¥–∞–Ω–∏–µ mock –∫–ª–∏–µ–Ω—Ç–∞
        client = MockMexcAPIClient()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_data = client.ticker_price('BTCUSDT')
        print(f"‚úÖ –¶–µ–Ω–∞ BTC: ${float(price_data['price']):,.2f}")
        
        # –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        order = client.place_order('BTCUSDT', 'BUY', 0.001, 44000.0)
        print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order['orderId']}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False


def test_web_interface():
    """–¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        from app import app
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        routes = [route.path for route in app.routes]
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤: {routes[:3]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False


def test_live_runner():
    """–¢–µ—Å—Ç live runner"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Live Runner...")
    
    try:
        from live_runner import LiveTradingBot
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ mock —Ä–µ–∂–∏–º–µ
        bot = LiveTradingBot(use_mock=True)
        status = bot.get_status_dict()
        
        print(f"‚úÖ Live Runner: Symbol={status['symbol']}, Mock={status['use_mock']}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Live Runner: {e}")
        return False


def test_backtest():
    """–¢–µ—Å—Ç –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backtester...")
    
    try:
        from backtest_runner import BacktestEngine
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞
        engine = BacktestEngine('config.json')
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = engine.generate_synthetic_data(days=7)  # 7 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
        
        print(f"‚úÖ Backtest Engine: {len(df)} —Å–≤–µ—á–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Backtest: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ MEXC Grid Trading Bot - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 60)
    
    tests = [
        ("–°—Ç—Ä–∞—Ç–µ–≥–∏—è", test_strategy),
        ("API –∫–ª–∏–µ–Ω—Ç", test_api_client),
        ("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", test_web_interface), 
        ("Live Runner", test_live_runner),
        ("Backtester", test_backtest)
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            success = test_func()
            results.append((name, success))
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {name}: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    for name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name:15} | {status}")
        if success:
            passed += 1
    
    total = len(results)
    print(f"\nüéØ –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("   ‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python3 app.py")
        print("   ‚Ä¢ Live —Ç–æ—Ä–≥–æ–≤–ª—è: python3 live_runner.py") 
        print("   ‚Ä¢ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥: python3 backtest_runner.py --plot")
    else:
        print(f"\n‚ö†Ô∏è  {total-passed} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç(–æ–≤) —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return passed == total


if __name__ == "__main__":
    main()
