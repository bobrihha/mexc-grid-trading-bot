"""
Live Runner –¥–ª—è MEXC Grid Trading Bot
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import time
import json
import asyncio
from datetime import datetime
from typing import Dict, Optional
import logging
from strategy import GridStrategy, OrderType
from mexc_api import MexcAPIClient, MockMexcAPIClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class LiveTradingBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è live —Ç–æ—Ä–≥–æ–≤–ª–µ–π
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC API
    - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    
    def __init__(self, config_path: str = 'config.json', use_mock: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            use_mock: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock-–∫–ª–∏–µ–Ω—Ç (True –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        """
        self.config_path = config_path
        self.use_mock = use_mock
        self.running = False
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_path, 'r', encoding='utf-8') as f:
            self.config = json.load(f)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategy = GridStrategy(config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        if use_mock:
            self.api_client = MockMexcAPIClient()
            logger.info("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MOCK API –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã API –∫–ª—é—á–∏
            api_key = input("–í–≤–µ–¥–∏—Ç–µ MEXC API Key: ")
            api_secret = input("–í–≤–µ–¥–∏—Ç–µ MEXC API Secret: ")
            self.api_client = MexcAPIClient(api_key, api_secret, testnet=True)
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É MEXC API")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_price = 0.0
        self.poll_interval = self.config['runtime']['poll_seconds']
        self.symbol = self.config['runtime']['symbol']
        
        logger.info(f"ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {self.symbol}")
    
    def get_market_data(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_data = self.api_client.ticker_price(self.symbol)
            current_price = float(price_data['price'])
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è bid/ask
            orderbook = self.api_client.order_book(self.symbol, limit=5)
            
            best_bid = float(orderbook['bids'][0][0]) if orderbook['bids'] else current_price
            best_ask = float(orderbook['asks'][0][0]) if orderbook['asks'] else current_price
            
            return {
                'price': current_price,
                'bid': best_bid,
                'ask': best_ask,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
            return {
                'price': self.last_price if self.last_price > 0 else 45000.0,
                'bid': self.last_price * 0.999 if self.last_price > 0 else 44950.0,
                'ask': self.last_price * 1.001 if self.last_price > 0 else 45050.0,
                'timestamp': datetime.now()
            }
    
    def execute_orders(self, actions: Dict):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é/–æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            actions: –°–ª–æ–≤–∞—Ä—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        for order in actions.get('place_orders', []):
            try:
                logger.info(f"üìã –†–∞–∑–º–µ—â–∞–µ–º {order.side.value}: {order.quantity} @ {order.price}")
                
                result = self.api_client.place_order(
                    symbol=order.symbol,
                    side=order.side.value,
                    quantity=order.quantity,
                    price=order.price,
                    order_type='LIMIT'
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ—Ä–¥–µ—Ä–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                order.id = result.get('orderId', order.id)
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order.id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order.id}: {e}")
        
        # –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤
        for order_id in actions.get('cancel_orders', []):
            try:
                logger.info(f"‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä: {order_id}")
                
                self.api_client.cancel_order(
                    symbol=self.symbol,
                    order_id=order_id
                )
                
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: {order_id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
    
    def check_fills(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
            recent_trades = self.api_client.my_trades(self.symbol, limit=10)
            
            for trade in recent_trades:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                self.strategy.on_order_filled(
                    order_id=trade.get('orderId'),
                    fill_price=float(trade.get('price')),
                    fill_quantity=float(trade.get('qty'))
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {e}")
    
    def reconcile_orders(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏
            exchange_orders = self.api_client.open_orders(self.symbol)
            exchange_order_ids = {order['orderId'] for order in exchange_orders}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_order_ids = set(self.strategy.active_orders.keys())
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            missing_on_exchange = strategy_order_ids - exchange_order_ids
            extra_on_exchange = exchange_order_ids - strategy_order_ids
            
            if missing_on_exchange:
                logger.warning(f"–û—Ä–¥–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ –±–∏—Ä–∂–µ: {missing_on_exchange}")
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                for order_id in missing_on_exchange:
                    if order_id in self.strategy.active_orders:
                        del self.strategy.active_orders[order_id]
            
            if extra_on_exchange:
                logger.warning(f"–õ–∏—à–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ: {extra_on_exchange}")
                # –ú–æ–∂–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    
    def log_status(self, market_data: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        status = self.strategy.get_status()
        
        logger.info("=" * 50)
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${status['cash']:.2f} | BTC: {status['base_holdings']:.6f}")
        logger.info(f"üìä –ö–∞–ø–∏—Ç–∞–ª: ${status['equity']:.2f} | P&L: {status['realized_pnl']:.2f}")
        logger.info(f"üìã –û—Ä–¥–µ—Ä–∞: {status['active_orders']} | –ü–æ–∑–∏—Ü–∏–∏: {status['positions']}")
        logger.info(f"üíπ –¶–µ–Ω–∞: ${market_data['price']:.2f} | –ü—Ä–æ—Å–∞–¥–∫–∞: {status['drawdown']:.1%}")
        logger.info("=" * 50)
    
    async def run_strategy_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        market_data = self.get_market_data()
        self.last_price = market_data['price']
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π
        self.check_fills()
        
        # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        actions = self.strategy.step_book(
            current_price=market_data['price'],
            bid=market_data['bid'],
            ask=market_data['ask']
        )
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for message in actions.get('messages', []):
            logger.info(f"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {message}")
        
        # 5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if actions.get('place_orders') or actions.get('cancel_orders'):
            self.execute_orders(actions)
        
        # 6. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
        if hasattr(self, 'cycle_count'):
            self.cycle_count += 1
        else:
            self.cycle_count = 1
            
        if self.cycle_count % 10 == 0:
            self.reconcile_orders()
        
        # 7. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤
        if self.cycle_count % 5 == 0:
            self.log_status(market_data)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ MEXC Grid Trading Bot...")
        self.running = True
        
        try:
            while self.running:
                asyncio.run(self.run_strategy_cycle())
                time.sleep(self.poll_interval)
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
            self.stop()
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        try:
            active_orders = self.api_client.open_orders(self.symbol)
            for order in active_orders:
                self.api_client.cancel_order(self.symbol, order['orderId'])
                logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä: {order['orderId']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_status_dict(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        return {
            'running': self.running,
            'last_price': self.last_price,
            'strategy_status': self.strategy.get_status(),
            'use_mock': self.use_mock,
            'symbol': self.symbol
        }


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ MEXC Grid Trading Bot")
    print("=" * 50)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    while True:
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1 - Mock (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n2 - Live (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)\n–í–≤–æ–¥ (1/2): ").strip()
        
        if mode == '1':
            use_mock = True
            break
        elif mode == '2':
            use_mock = False
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è! –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
            if confirm == 'yes':
                break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = LiveTradingBot(use_mock=use_mock)
    bot.run()


if __name__ == "__main__":
    main()
